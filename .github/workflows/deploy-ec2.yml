name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ECR_REPOSITORY: my-story-buddy-backend
  ECR_REGISTRY: 926211191776.dkr.ecr.us-east-1.amazonaws.com
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      run: |
        # Build Docker image using EC2-specific Dockerfile
        echo "🔨 Building Docker image for EC2..."
        docker build --platform linux/amd64 -f Dockerfile.ec2 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker build --platform linux/amd64 -f Dockerfile.ec2 -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        
        # Push images
        echo "📤 Pushing images to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        
        echo "✅ Images pushed successfully"
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Navigate to app directory
          echo "📁 Navigating to application directory..."
          cd /opt/my-story-buddy
          
          # Configure AWS credentials for ECR access
          echo "🔐 Configuring AWS credentials..."
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}
          
          # Login to ECR
          echo "🔑 Logging into ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          # Update environment variables
          echo "⚙️  Updating environment variables..."
          cat > .env << EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          AWS_REGION=${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          EOF
          
          # Set up SSL certificates if they don't exist
          if [ ! -f ssl/server.crt ]; then
            echo "🔐 Setting up SSL certificates..."
            ./setup-ssl.sh
          else
            echo "✅ SSL certificates already exist"
          fi
          
          # Pull latest image
          echo "📥 Pulling latest Docker image..."
          docker-compose pull
          
          # Stop existing container
          echo "🛑 Stopping existing containers..."
          docker-compose down
          
          # Start new container with HTTPS support
          echo "🚀 Starting new containers with HTTPS..."
          docker-compose up -d
          
          # Wait for health check
          echo "⏳ Waiting for application to be healthy..."
          sleep 30
          
          # Health check with retry logic
          echo "🏥 Running health checks..."
          RETRY_COUNT=0
          MAX_RETRIES=5
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -k -f https://localhost/health > /dev/null 2>&1; then
              echo "✅ Deployment successful! Application is healthy."
              echo "🌐 Application is running at: https://${{ secrets.EC2_HOST }}"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "⏳ Health check attempt $RETRY_COUNT/$MAX_RETRIES failed. Retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ Deployment failed! Health check failed after $MAX_RETRIES attempts."
            echo "📋 Container status:"
            docker-compose ps
            echo "📋 Container logs:"
            docker-compose logs --tail=50
            exit 1
          fi
          
          # Clean up old images
          echo "🧹 Cleaning up old Docker images..."
          docker image prune -f

    - name: Deployment Summary
      if: always()
      run: |
        echo "=========================================="
        echo "🚀 DEPLOYMENT SUMMARY"
        echo "=========================================="
        echo "📊 Status: ${{ job.status }}"
        echo "🏷️  Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "=========================================="
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment to EC2 completed successfully!"
          echo "🌐 Production URL: https://${{ secrets.EC2_HOST }}"
          echo "🏥 Health check: https://${{ secrets.EC2_HOST }}/health"
          echo "📡 API docs: https://${{ secrets.EC2_HOST }}/docs"
        else
          echo "❌ Deployment failed. Please check the logs above."
          echo "🔍 Debug steps:"
          echo "  1. Check GitHub Actions logs"
          echo "  2. SSH to EC2 and check: docker-compose logs"
          echo "  3. Verify all secrets are configured"
        fi
        echo "=========================================="